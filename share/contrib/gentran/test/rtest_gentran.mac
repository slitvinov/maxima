/*
batch("~/src/maxima-code/share/contrib/gentran/test/rtest_gentran.mac", 'test);
*/

(kill(all), 0);
0$

(load("~/src/maxima-code/share/contrib/gentran/gentran.lisp"),
  delete_file(infile):= block([f], f: openw(infile), close(f)),
  read_file_to_strings(infile):= block([l, st: openr(infile), out: []],
    while (l: readline(st))#false do out: cons(l, out),
    close(st),
    reverse(out)),
  compare_files(A, B):=  is( equal(read_file_to_strings(A),
      read_file_to_strings(B))),
  with_gentran_output([arg])::= buildq([infile: first(arg),
    commands: rest(arg)], block(
      delete_file(infile),
      gentranout(infile),
      gentran(splice(commands)),
      gentranshut(infile))),
  gentran_to_strings([arg])::=buildq([arg],
    (with_gentran_output("_tmp_.dat", splice(arg)),
    read_file_to_strings("_tmp_.dat"))),
    'done);
'done$

gentranlang('c);
?c$

gentranlang('ratfor);
?ratfor$

gentranlang('fortran);
?fortran$

gentranlang('fortran);
?fortran$

(gentranlang('fortran), gentran_to_strings(a : 10));
["      a=10.0"]$

(gentranlang('c), gentran_to_strings(a : 10));
["a=10.0;"]$

(gentranlang('ratfor), gentran_to_strings(a : 10));
["a=10.0"]$

/* `gentran' shell not evaluate its arguments */
(gentranlang('fortran), block([a: 42], gentran_to_strings(a : 10)));
["      a=10.0"]$

(gentranlang('fortran), gentran_to_strings(dX : 10));
["      dX=10.0"]$

(gentranlang('c), gentran_to_strings(dX : 10));
["dX=10.0;"]$

(gentranlang('ratfor), gentran_to_strings(dX : 10));
["dX=10.0"]$

(delete_file("di.f"),
  gentranlang('fortran),
  gentranin("di.template", ["di.f"]),
  compare_files("di.f", "di.output"));
true$

(delete_file("di2.f"),
  gentranlang('fortran),
  gentranin("di2.template", ["di2.f"]),
  compare_files("di2.f", "di2.output"));
true$

/*
(k : 1/(2*m)*p^2,
u : k0/2*q^2,
d : b/2*qdot,
h : k + u,
batch("rk.in"),
batch("ham.in"),
delete_file("runge.f"),
gentranin("runge.template", ["runge.f"]));
0$
*/

(gentranlang('fortran),
  with_gentran_output("fun.f", function("real", f(x, y)), body( x:x^2, y:y^2, f:abs(x-y))),
  compare_files("fun.f", "fun.output.f"));
true$

(gentranlang('c),
  apply('sconcat, 
    gentran_to_strings ( cprocedure("float", f(x, y)), body(return(x+y)))));
"float f(x,y){    return(x+y);}"$

/*
gentranlang('fortran);
gentran_to_strings(begin_group, end_group);
gentran_to_strings(break());
*/

block([f: 10], gentranlang('fortran), gentran_to_strings(u : eval(f)));
["      u=10.0"]$

(on(gentranopt),
gentranlang('fortran),
ans: diff(exp(y+x^2)/(y+x),x,2),
apply('sconcat, gentran_to_strings( rsetq(ans, ans) )));
"      real t3,t4,t5,t6      t3=x+y      t4=x**2      t5=EXP(1)**(t4+y)      t6=1.0/t3      ans=2.0*t5/t3**3-4.0*x*t5/t3**2+2.0*t6*t5+4.0*t4*t6*t5"$

(on(gentranseq),
  ?maxexpprintlen\*: 120,
  ( poly : 0,
    for i:0 thru 20 do
    poly : poly + c(i+1)*x^i ),
  gentran_to_strings( rsetq( poly, poly ) ));
["      real tt7",
 "      tt7=c(1)+c(2)*x+c(3)*x**2+c(4)*x**3+c(5)*x**4+c(6)*x**5+c(7)*x**6+",
 "     . c(8)*x**7+c(9)*x**8+c(10)*x**9",
 "      tt7=tt7+c(11)*x**10+c(12)*x**11+c(13)*x**12+c(14)*x**13+c(15)*x**",
 "     . 14+c(16)*x**15+c(17)*x**16+c(18)*x**17",
 "      poly=tt7+c(19)*x**18+c(20)*x**19+c(21)*x**20"]$

gentran_to_strings ( 10 );
["10.0"]$
